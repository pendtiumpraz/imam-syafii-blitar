// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      String   @default("STAFF") // ADMIN or STAFF
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdTransactions Transaction[]
  createdActivities   Activity[]
  createdCourses      Course[]
  createdVideos       Video[]
  createdEbooks       Ebook[]

  @@map("users")
}

model Transaction {
  id          String   @id @default(cuid())
  type        String   // INCOME, EXPENSE, or DONATION
  category    String
  amount      Float
  description String
  date        DateTime
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("transactions")
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  date        DateTime
  location    String?
  photos      String   @default("[]") // JSON string of photo URLs
  status      String   @default("planned") // planned, ongoing, completed
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("activities")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String
  level       String // beginner, intermediate, advanced
  schedule    String
  teacher     String
  duration    String
  capacity    Int
  enrolled    Int      @default(0)
  status      String   @default("active") // active, inactive, completed
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("courses")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  thumbnail   String?
  duration    String?
  category    String
  teacher     String
  uploadDate  DateTime
  views       Int      @default(0)
  isPublic    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("videos")
}

model Ebook {
  id           String    @id @default(cuid())
  title        String
  author       String
  description  String
  category     String    // Fiqh, Hadith, Tafsir, Akhlak, etc.
  subcategory  String?   // More specific categorization
  fileUrl      String    // URL to PDF file
  coverImage   String?   // Cover image URL
  fileSize     Int?      // File size in bytes
  pageCount    Int?      // Number of pages
  language     String    @default("id") // id, ar, en
  publisher    String?
  publishYear  String?
  isbn         String?
  tags         String    @default("[]") // JSON string of tags
  downloadCount Int      @default(0)
  viewCount    Int       @default(0)
  isFeatured   Boolean   @default(false)
  isPublic     Boolean   @default(true)
  createdBy    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("ebooks")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("settings")
}