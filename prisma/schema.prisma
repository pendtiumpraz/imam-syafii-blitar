// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      String   @default("STAFF") // ADMIN or STAFF
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdTransactions Transaction[]
  createdJournalEntries JournalEntry[]
  createdBudgets      Budget[]
  createdReports      FinancialReport[]
  auditTrails         AuditTrail[]
  createdActivities   Activity[]
  createdCourses      Course[]
  createdVideos       Video[]
  createdEbooks       Ebook[]
  createdStudents     Student[]
  createdAlumni       Alumni[]
  createdCampaigns    DonationCampaign[]
  createdPurchaseOrders PurchaseOrder[]

  @@map("users")
}

// Financial Management Models with Double-Entry Bookkeeping Support

model FinancialAccount {
  id          String   @id @default(cuid())
  code        String   @unique // Account code like "1001", "2001", etc.
  name        String
  type        String   // ASSET, LIABILITY, EQUITY, INCOME, EXPENSE
  subtype     String?  // CASH, BANK, AR, AP, etc.
  parentId    String?
  isActive    Boolean  @default(true)
  balance     Float    @default(0)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      FinancialAccount? @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    FinancialAccount[] @relation("AccountHierarchy")
  entryLines  JournalEntryLine[] @relation("AccountEntries")
  categories  FinancialCategory[]

  @@index([type, isActive])
  @@map("financial_accounts")
}

model FinancialCategory {
  id          String   @id @default(cuid())
  name        String
  type        String   // INCOME, EXPENSE, DONATION
  code        String?  // Category code
  accountId   String   // Link to chart of accounts
  color       String?  // UI color for charts
  icon        String?  // UI icon
  isActive    Boolean  @default(true)
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  account      FinancialAccount @relation(fields: [accountId], references: [id])
  parent       FinancialCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     FinancialCategory[] @relation("CategoryHierarchy")
  transactions Transaction[]
  budgetItems  BudgetItem[]

  @@unique([name, type])
  @@index([type, isActive])
  @@map("financial_categories")
}

model Transaction {
  id            String   @id @default(cuid())
  transactionNo String   @unique // Format: TRX-2024-001
  type          String   // INCOME, EXPENSE, DONATION
  categoryId    String
  amount        Float
  description   String
  reference     String?  // Invoice no, receipt no, etc.
  date          DateTime
  dueDate       DateTime? // For receivables/payables
  status        String   @default("POSTED") // DRAFT, POSTED, CANCELLED, REVERSED
  tags          String   @default("[]") // JSON array of tags
  attachments   String   @default("[]") // JSON array of attachment URLs
  notes         String?
  createdBy     String
  approvedBy    String?
  approvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category      FinancialCategory @relation(fields: [categoryId], references: [id])
  creator       User @relation(fields: [createdBy], references: [id])
  journalEntry  JournalEntry?

  @@index([type, status, date])
  @@index([categoryId])
  @@map("transactions")
}

model JournalEntry {
  id            String   @id @default(cuid())
  entryNo       String   @unique // Format: JE-2024-001
  transactionId String?  @unique
  description   String
  date          DateTime
  reference     String?
  status        String   @default("POSTED") // DRAFT, POSTED, REVERSED
  totalDebit    Float    @default(0)
  totalCredit   Float    @default(0)
  isBalanced    Boolean  @default(false)
  createdBy     String
  approvedBy    String?
  approvedAt    DateTime?
  reversedBy    String?
  reversedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  creator       User @relation(fields: [createdBy], references: [id])
  entries       JournalEntryLine[]

  @@index([status, date])
  @@map("journal_entries")
}

model JournalEntryLine {
  id            String   @id @default(cuid())
  journalId     String
  accountId     String
  debitAmount   Float    @default(0)
  creditAmount  Float    @default(0)
  description   String?
  lineOrder     Int      @default(0)
  createdAt     DateTime @default(now())

  // Relations
  journal       JournalEntry @relation(fields: [journalId], references: [id], onDelete: Cascade)
  account       FinancialAccount @relation("AccountEntries", fields: [accountId], references: [id])

  @@index([journalId, lineOrder])
  @@map("journal_entry_lines")
}

model Budget {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("ANNUAL") // MONTHLY, QUARTERLY, ANNUAL
  startDate   DateTime
  endDate     DateTime
  totalBudget Float    @default(0)
  status      String   @default("DRAFT") // DRAFT, ACTIVE, CLOSED
  description String?
  createdBy   String
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User @relation(fields: [createdBy], references: [id])
  items       BudgetItem[]
  reports     FinancialReport[]

  @@index([status, startDate])
  @@map("budgets")
}

model BudgetItem {
  id           String   @id @default(cuid())
  budgetId     String
  categoryId   String
  budgetAmount Float
  actualAmount Float    @default(0)
  variance     Float    @default(0)
  percentage   Float    @default(0)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  budget       Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category     FinancialCategory @relation(fields: [categoryId], references: [id])

  @@unique([budgetId, categoryId])
  @@map("budget_items")
}

model FinancialReport {
  id          String   @id @default(cuid())
  name        String
  type        String   // INCOME_STATEMENT, BALANCE_SHEET, CASH_FLOW, BUDGET_VARIANCE
  period      String   // MONTHLY, QUARTERLY, ANNUAL
  startDate   DateTime
  endDate     DateTime
  budgetId    String?
  data        String   // JSON data of the report
  fileUrl     String?  // Generated PDF/Excel file
  status      String   @default("GENERATED") // DRAFT, GENERATED, EXPORTED
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User @relation(fields: [createdBy], references: [id])
  budget      Budget? @relation(fields: [budgetId], references: [id])

  @@index([type, period, startDate])
  @@map("financial_reports")
}

model AuditTrail {
  id          String   @id @default(cuid())
  tableName   String   // Table that was modified
  recordId    String   // ID of the modified record
  action      String   // CREATE, UPDATE, DELETE
  oldValues   String?  // JSON of old values
  newValues   String?  // JSON of new values
  userId      String
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  // Relations
  user        User @relation(fields: [userId], references: [id])

  @@index([tableName, recordId])
  @@index([userId, timestamp])
  @@map("audit_trails")
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  date        DateTime
  location    String?
  photos      String   @default("[]") // JSON string of photo URLs
  status      String   @default("planned") // planned, ongoing, completed
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("activities")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String
  level       String // beginner, intermediate, advanced
  schedule    String
  teacher     String
  duration    String
  capacity    Int
  enrolled    Int      @default(0)
  status      String   @default("active") // active, inactive, completed
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("courses")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  thumbnail   String?
  duration    String?
  category    String
  teacher     String
  uploadDate  DateTime
  views       Int      @default(0)
  isPublic    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("videos")
}

model Ebook {
  id           String    @id @default(cuid())
  title        String
  author       String
  description  String
  category     String    // Fiqh, Hadith, Tafsir, Akhlak, etc.
  subcategory  String?   // More specific categorization
  fileUrl      String    // URL to PDF file
  coverImage   String?   // Cover image URL
  fileSize     Int?      // File size in bytes
  pageCount    Int?      // Number of pages
  language     String    @default("id") // id, ar, en
  publisher    String?
  publishYear  String?
  isbn         String?
  tags         String    @default("[]") // JSON string of tags
  downloadCount Int      @default(0)
  viewCount    Int       @default(0)
  isFeatured   Boolean   @default(false)
  isPublic     Boolean   @default(true)
  createdBy    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("ebooks")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("settings")
}

model Student {
  id              String    @id @default(cuid())
  nisn            String?   @unique // Nomor Induk Siswa Nasional
  nis             String    @unique // Nomor Induk Siswa
  fullName        String
  nickname        String?
  birthPlace      String
  birthDate       DateTime
  gender          String    // MALE or FEMALE
  bloodType       String?   // A, B, AB, O
  religion        String    @default("Islam")
  nationality     String    @default("Indonesia")
  
  // Contact Information
  address         String
  village         String?   // Desa/Kelurahan
  district        String?   // Kecamatan
  city            String    // Kota/Kabupaten
  province        String    @default("Jawa Timur")
  postalCode      String?
  phone           String?
  email           String?
  
  // Parent Information
  fatherName      String
  fatherJob       String?
  fatherPhone     String?
  fatherEducation String?
  motherName      String
  motherJob       String?
  motherPhone     String?
  motherEducation String?
  guardianName    String?   // Wali if different from parents
  guardianJob     String?
  guardianPhone   String?
  guardianRelation String?  // Hubungan dengan wali
  
  // Academic Information
  institutionType String    // TK, SD, PONDOK
  grade           String?   // Kelas
  enrollmentDate  DateTime
  enrollmentYear  String    // Tahun ajaran
  previousSchool  String?
  
  // Additional Information
  specialNeeds    String?   // Kebutuhan khusus
  achievements    String    @default("[]") // JSON array of achievements
  notes           String?
  photo           String?   // URL to photo
  documents       String    @default("[]") // JSON array of document URLs
  
  // Status
  status          String    @default("ACTIVE") // ACTIVE, GRADUATED, TRANSFERRED, DROPPED
  isActive        Boolean   @default(true)
  graduationDate  DateTime?
  
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  creator         User      @relation(fields: [createdBy], references: [id])
  registrationId  String?   @unique
  registration    Registration? @relation(fields: [registrationId], references: [id])
  payments        Payment[]
  
  @@index([institutionType, status])
  @@index([enrollmentYear])
  @@map("students")
}

model Alumni {
  id              String    @id @default(cuid())
  nisn            String?   // Nomor Induk Siswa Nasional
  nis             String?   // Nomor Induk Siswa (lama)
  fullName        String
  nickname        String?
  birthPlace      String
  birthDate       DateTime
  gender          String    // MALE or FEMALE
  bloodType       String?
  religion        String    @default("Islam")
  nationality     String    @default("Indonesia")
  
  // Contact Information (Current)
  currentAddress  String
  currentCity     String
  currentProvince String?
  currentCountry  String    @default("Indonesia")
  phone           String?
  whatsapp        String?   // WhatsApp number for easy contact
  email           String?
  facebook        String?   // Facebook profile
  instagram       String?   // Instagram handle
  linkedin        String?   // LinkedIn profile
  
  // Parent Information
  fatherName      String?
  motherName      String?
  
  // Alumni Information
  institutionType String    // TK, SD, PONDOK
  graduationYear  String    // Tahun lulus
  generation      String?   // Angkatan
  
  // Current Status
  currentJob      String?   // Pekerjaan sekarang
  jobPosition     String?   // Jabatan
  company         String?   // Perusahaan/Institusi
  furtherEducation String?  // Pendidikan lanjutan
  university      String?   // Universitas
  major           String?   // Jurusan
  
  // Achievements After Graduation
  achievements    String    @default("[]") // JSON array of achievements
  
  // Family Information
  maritalStatus   String?   // SINGLE, MARRIED, DIVORCED
  spouseName      String?
  childrenCount   Int       @default(0)
  
  // Additional Information
  notes           String?
  photo           String?   // Recent photo URL
  memories        String?   // Kenangan di sekolah/pondok
  message         String?   // Pesan untuk juniors
  
  // Availability for Events
  availableForEvents Boolean @default(true) // Bisa diundang acara
  lastContactDate DateTime?
  
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  creator         User      @relation(fields: [createdBy], references: [id])
  
  @@index([institutionType, graduationYear])
  @@index([generation])
  @@index([availableForEvents])
  @@map("alumni")
}

// ==========================================
// PPDB (Penerimaan Peserta Didik Baru)
// ==========================================

model Registration {
  id                String   @id @default(cuid())
  registrationNo    String   @unique // Format: PPDB-2024-001
  
  // Personal Data
  fullName          String
  nickname          String?
  gender            String   // L/P
  birthPlace        String
  birthDate         DateTime
  nik               String?
  nisn              String?
  
  // Address
  address           String
  rt                String?
  rw                String?
  village           String
  district          String
  city              String
  province          String   @default("Jawa Timur")
  postalCode        String?
  
  // Education
  level             String   // TK, SD, PONDOK
  previousSchool    String?
  gradeTarget       String?  // Kelas yang dituju
  programType       String?  // REGULER, TAHFIDZ, KITAB
  boardingType      String?  // MONDOK, PULANG
  
  // Parent Data - Father
  fatherName        String
  fatherNik         String?
  fatherJob         String?
  fatherPhone       String?
  fatherEducation   String?
  fatherIncome      String?  // Range pendapatan
  
  // Parent Data - Mother
  motherName        String
  motherNik         String?
  motherJob         String?
  motherPhone       String?
  motherEducation   String?
  motherIncome      String?  // Range pendapatan
  
  // Guardian (if different from parents)
  guardianName      String?
  guardianRelation  String?
  guardianPhone     String?
  guardianAddress   String?
  
  // Contact
  phoneNumber       String
  whatsapp          String
  email             String?
  
  // Health Information
  bloodType         String?
  height            Int?     // cm
  weight            Int?     // kg
  specialNeeds      String?  // Kebutuhan khusus
  medicalHistory    String?  // Riwayat penyakit
  
  // Status Tracking
  status            String   @default("DRAFT") // DRAFT, SUBMITTED, DOCUMENT_CHECK, VERIFIED, TEST_SCHEDULED, TEST_TAKEN, PASSED, FAILED, REGISTERED
  paymentStatus     String   @default("UNPAID") // UNPAID, PAID, VERIFIED
  
  // Documents (JSON array of document info)
  documents         String   @default("[]") // {type, fileName, url, status}
  
  // Test & Selection
  testSchedule      DateTime?
  testVenue         String?
  testScore         String?  // JSON: {quran: 80, arabic: 75, interview: 85}
  testResult        String?  // PASSED, FAILED, WAITING
  ranking           Int?
  
  // Registration Fee
  registrationFee   Decimal  @default(150000)
  paymentMethod     String?
  paymentDate       DateTime?
  paymentProof      String?  // URL bukti transfer
  
  // Re-registration (Daftar Ulang)
  reregStatus       String?  // WAITING, COMPLETED
  reregDate         DateTime?
  reregPayment      String?  // JSON payment details
  
  // Admin Notes
  notes             String?
  verifiedBy        String?
  verifiedAt        DateTime?
  rejectionReason   String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  submittedAt       DateTime?
  
  // Relations
  payments          Payment[]
  student           Student?
  
  @@index([status])
  @@index([level])
  @@index([paymentStatus])
  @@index([testResult])
  @@map("registrations")
}

model Payment {
  id              String   @id @default(cuid())
  paymentNo       String   @unique // Format: PAY-2024-12-0001
  
  // Relations
  registrationId  String?
  registration    Registration? @relation(fields: [registrationId], references: [id])
  studentId       String?
  student         Student? @relation(fields: [studentId], references: [id])
  
  // Payment Details
  amount          Decimal
  paymentType     String   // REGISTRATION, SPP, DAFTAR_ULANG, UNIFORM, etc
  description     String?
  
  // Payment Method
  method          String   // TRANSFER, CASH, VA, EWALLET, QRIS
  channel         String?  // BCA, MANDIRI, GOPAY, OVO, etc
  
  // Status
  status          String   @default("PENDING") // PENDING, SUCCESS, FAILED, EXPIRED, REFUNDED
  
  // Verification (for manual transfer)
  proofUrl        String?  // Bukti transfer
  verifiedBy      String?
  verifiedAt      DateTime?
  
  // External Payment Gateway
  externalId      String?  // ID from payment gateway
  vaNumber        String?  // Virtual account number
  expiredAt       DateTime?
  
  // Timestamps
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status])
  @@index([paymentType])
  @@map("payments")
}

// ==========================================
// DONATION SYSTEM
// ==========================================

model DonationCategory {
  id          String   @id @default(cuid())
  name        String   @unique // Infaq, Sedekah, Wakaf, Zakat
  description String?
  icon        String?  // Icon name for UI
  color       String?  // Color code for UI
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaigns   DonationCampaign[]
  donations   Donation[]
  
  @@map("donation_categories")
}

model DonationCampaign {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  description     String
  story           String?  // Detailed campaign story
  categoryId      String
  
  // Financial targets
  targetAmount    Decimal
  currentAmount   Decimal  @default(0)
  
  // Campaign period
  startDate       DateTime @default(now())
  endDate         DateTime?
  
  // Media
  mainImage       String?  // Main campaign image
  images          String   @default("[]") // JSON array of additional images
  video           String?  // Video URL
  
  // Status and settings
  status          String   @default("DRAFT") // DRAFT, ACTIVE, PAUSED, COMPLETED, CANCELLED
  isFeatured      Boolean  @default(false)
  isUrgent        Boolean  @default(false)
  allowAnonymous  Boolean  @default(true)
  
  // Social sharing
  shareCount      Int      @default(0)
  
  // Admin fields
  createdBy       String
  approvedBy      String?
  approvedAt      DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  category        DonationCategory @relation(fields: [categoryId], references: [id])
  creator         User @relation(fields: [createdBy], references: [id])
  donations       Donation[]
  updates         CampaignUpdate[]
  
  @@index([status, isFeatured])
  @@index([categoryId])
  @@index([endDate])
  @@map("donation_campaigns")
}

model CampaignUpdate {
  id          String   @id @default(cuid())
  campaignId  String
  title       String
  content     String
  images      String   @default("[]") // JSON array of image URLs
  isPublic    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaign    DonationCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@index([campaignId, createdAt])
  @@map("campaign_updates")
}

model Donation {
  id              String   @id @default(cuid())
  donationNo      String   @unique // Format: DON-2024-001
  
  // Basic donation info
  campaignId      String?
  categoryId      String
  amount          Decimal
  message         String?  // Message to beneficiaries
  
  // Donor information
  donorName       String?
  donorEmail      String?
  donorPhone      String?
  isAnonymous     Boolean  @default(false)
  
  // Payment details
  paymentMethod   String?  // TRANSFER, VA, EWALLET, QRIS, CASH
  paymentChannel  String?  // BCA, MANDIRI, GOPAY, etc.
  paymentStatus   String   @default("PENDING") // PENDING, PAID, VERIFIED, FAILED
  
  // External payment gateway
  externalId      String?  // Payment gateway transaction ID
  vaNumber        String?  // Virtual account number
  qrisCode        String?  // QRIS payment code
  paymentUrl      String?  // Payment URL from gateway
  expiredAt       DateTime?
  paidAt          DateTime?
  
  // Verification (for manual payments)
  proofUrl        String?  // Payment proof image
  verifiedBy      String?
  verifiedAt      DateTime?
  
  // Certificate
  certificateNo   String?  // Generated certificate number
  certificateUrl  String?  // Generated certificate PDF URL
  
  // Metadata
  source          String   @default("WEB") // WEB, MOBILE, WHATSAPP, MANUAL
  ipAddress       String?
  userAgent       String?
  referrer        String?  // UTM tracking
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  campaign        DonationCampaign? @relation(fields: [campaignId], references: [id])
  category        DonationCategory @relation(fields: [categoryId], references: [id])
  
  @@index([paymentStatus, createdAt])
  @@index([campaignId])
  @@index([categoryId])
  @@index([donorEmail])
  @@map("donations")
}

model ZakatCalculation {
  id              String   @id @default(cuid())
  calculationType String   // FITRAH, MAL, EMAS, PERAK, PERDAGANGAN
  
  // Input values (stored as JSON for flexibility)
  inputs          String   // JSON object with calculation inputs
  
  // Results
  zakatAmount     Decimal
  nisabAmount     Decimal?
  
  // Optional donor info
  donorName       String?
  donorEmail      String?
  donorPhone      String?
  
  // Did they proceed to donate?
  donationId      String?  // Link to actual donation if they proceeded
  
  createdAt       DateTime @default(now())
  
  @@index([calculationType, createdAt])
  @@map("zakat_calculations")
}

model DonorProfile {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  phone           String?
  
  // Preferences
  preferredCategories String @default("[]") // JSON array of preferred category IDs
  allowMarketing  Boolean  @default(true)
  allowNewsletter Boolean  @default(true)
  
  // Stats
  totalDonated    Decimal  @default(0)
  donationCount   Int      @default(0)
  lastDonationAt  DateTime?
  
  // Verification
  isVerified      Boolean  @default(false)
  verificationToken String?
  verifiedAt      DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([email])
  @@index([isVerified])
  @@map("donor_profiles")
}

// ==========================================
// BUSINESS UNIT / UNIT USAHA MODELS
// ==========================================

model ProductCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?  // Icon name for UI
  color       String?  // Color for UI
  isActive    Boolean  @default(true)
  parentId    String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      ProductCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  products    Product[]

  @@index([isActive, sortOrder])
  @@map("product_categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique // SKU/Barcode
  description String?
  categoryId  String
  price       Decimal
  cost        Decimal  @default(0) // Cost price for profit calculation
  stock       Int      @default(0) // Current stock level
  minStock    Int      @default(5) // Minimum stock alert level
  unit        String   @default("pcs") // Unit of measurement (pcs, kg, liter, etc.)
  image       String?  // Product image URL
  isActive    Boolean  @default(true)
  
  // Additional product info
  brand       String?
  supplier    String? // Default supplier name
  location    String  @default("UMUM") // Storage location (KOPERASI, KANTIN, KATERING)
  tags        String  @default("[]") // JSON array of tags
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category            ProductCategory @relation(fields: [categoryId], references: [id])
  inventoryRecords    Inventory[]
  inventoryTransactions InventoryTransaction[]
  saleItems           SaleItem[]
  purchaseItems       PurchaseOrderItem[]

  @@index([code])
  @@index([categoryId, isActive])
  @@index([location, isActive])
  @@index([stock]) // For low stock queries
  @@map("products")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  code        String?  @unique // Supplier code
  contact     String?  // Contact person name
  address     String?
  phone       String?
  email       String?
  whatsapp    String?  // WhatsApp number
  
  // Business info
  taxId       String?  // NPWP
  bankAccount String?  // Bank account info
  paymentTerms String? // Payment terms (e.g., "NET 30")
  
  // Status
  isActive    Boolean  @default(true)
  rating      Int      @default(5) // Supplier rating 1-5
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  purchaseOrders PurchaseOrder[]

  @@index([isActive])
  @@map("suppliers")
}

model Inventory {
  id          String   @id @default(cuid())
  productId   String
  quantity    Int
  location    String   // KOPERASI, KANTIN, KATERING, GUDANG
  
  // FIFO tracking
  unitCost    Decimal  @default(0) // Cost per unit for this batch
  batchNo     String?  // Batch number for tracking
  expiryDate  DateTime? // For perishable items
  
  lastUpdated DateTime @default(now())
  updatedBy   String?
  notes       String?

  // Relations
  product     Product @relation(fields: [productId], references: [id])

  @@unique([productId, location, batchNo])
  @@index([productId, location])
  @@index([expiryDate])
  @@map("inventory")
}

model InventoryTransaction {
  id          String   @id @default(cuid())
  productId   String
  type        String   // IN, OUT, ADJUSTMENT, TRANSFER
  quantity    Int      // Positive for IN, negative for OUT
  location    String   // Where the transaction happened
  
  // Cost tracking
  unitCost    Decimal  @default(0)
  totalCost   Decimal  @default(0)
  
  // Reference information
  reference   String?  // Reference to sale, purchase, etc.
  referenceId String?  // ID of related transaction
  batchNo     String?  // Batch number
  
  reason      String?  // Reason for adjustment/transfer
  notes       String?
  
  createdAt   DateTime @default(now())
  createdBy   String?

  // Relations
  product     Product @relation(fields: [productId], references: [id])

  @@index([productId, type, createdAt])
  @@index([type, createdAt])
  @@index([referenceId])
  @@map("inventory_transactions")
}

model PurchaseOrder {
  id          String   @id @default(cuid())
  orderNo     String   @unique // Format: PO-2024-001
  supplierId  String
  
  // Order details
  status      String   @default("DRAFT") // DRAFT, SENT, CONFIRMED, PARTIALLY_RECEIVED, RECEIVED, CANCELLED
  orderDate   DateTime @default(now())
  expectedDate DateTime? // Expected delivery date
  receivedDate DateTime? // Actual received date
  
  // Totals
  subtotal    Decimal  @default(0)
  taxAmount   Decimal  @default(0)
  discountAmount Decimal @default(0)
  shippingCost Decimal @default(0)
  totalAmount Decimal  @default(0)
  
  // Payment
  paymentStatus String @default("UNPAID") // UNPAID, PARTIALLY_PAID, PAID
  paidAmount   Decimal @default(0)
  
  // Additional info
  notes       String?
  terms       String?  // Payment terms
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  // Relations
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  items       PurchaseOrderItem[]
  creator     User @relation(fields: [createdBy], references: [id])
  
  @@index([status, orderDate])
  @@index([supplierId])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String   @id @default(cuid())
  purchaseOrderId String
  productId       String
  
  quantity        Int
  unitCost        Decimal
  totalCost       Decimal
  
  // Receiving tracking
  receivedQty     Int      @default(0)
  remainingQty    Int      // Calculated field: quantity - receivedQty
  
  notes           String?
  
  createdAt       DateTime @default(now())

  // Relations
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product         Product @relation(fields: [productId], references: [id])

  @@unique([purchaseOrderId, productId])
  @@map("purchase_order_items")
}

model Sale {
  id          String   @id @default(cuid())
  saleNo      String   @unique // Format: SAL-2024-001
  
  // Customer info (optional for cash sales)
  customerName String?
  customerPhone String?
  customerEmail String?
  
  // Sale details
  location    String   @default("KOPERASI") // KOPERASI, KANTIN, KATERING
  saleDate    DateTime @default(now())
  
  // Totals
  subtotal    Decimal
  taxAmount   Decimal  @default(0)
  discountAmount Decimal @default(0)
  totalAmount Decimal
  
  // Payment
  paymentMethod String @default("CASH") // CASH, CARD, TRANSFER, QRIS
  paidAmount   Decimal
  changeAmount Decimal @default(0)
  paymentReference String? // For non-cash payments
  
  // Staff info
  cashier     String   // User ID of cashier
  
  // Status
  status      String   @default("COMPLETED") // DRAFT, COMPLETED, CANCELLED, REFUNDED
  
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       SaleItem[]
  
  @@index([saleDate, location])
  @@index([status])
  @@index([cashier])
  @@map("sales")
}

model SaleItem {
  id          String   @id @default(cuid())
  saleId      String
  productId   String
  
  quantity    Int
  unitPrice   Decimal  // Price at time of sale
  unitCost    Decimal  // Cost at time of sale (for profit calculation)
  subtotal    Decimal  // quantity * unitPrice
  
  // Discount if applied to specific item
  discountAmount Decimal @default(0)
  finalAmount    Decimal // subtotal - discountAmount
  
  createdAt   DateTime @default(now())

  // Relations
  sale        Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])

  @@unique([saleId, productId])
  @@map("sale_items")
}