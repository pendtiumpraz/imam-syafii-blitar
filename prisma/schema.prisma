// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      String   @default("STAFF") // ADMIN or STAFF
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdTransactions Transaction[]
  createdActivities   Activity[]
  createdCourses      Course[]
  createdVideos       Video[]
  createdEbooks       Ebook[]
  createdStudents     Student[]
  createdAlumni       Alumni[]

  @@map("users")
}

model Transaction {
  id          String   @id @default(cuid())
  type        String   // INCOME, EXPENSE, or DONATION
  category    String
  amount      Float
  description String
  date        DateTime
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("transactions")
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  date        DateTime
  location    String?
  photos      String   @default("[]") // JSON string of photo URLs
  status      String   @default("planned") // planned, ongoing, completed
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("activities")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String
  level       String // beginner, intermediate, advanced
  schedule    String
  teacher     String
  duration    String
  capacity    Int
  enrolled    Int      @default(0)
  status      String   @default("active") // active, inactive, completed
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("courses")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  thumbnail   String?
  duration    String?
  category    String
  teacher     String
  uploadDate  DateTime
  views       Int      @default(0)
  isPublic    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("videos")
}

model Ebook {
  id           String    @id @default(cuid())
  title        String
  author       String
  description  String
  category     String    // Fiqh, Hadith, Tafsir, Akhlak, etc.
  subcategory  String?   // More specific categorization
  fileUrl      String    // URL to PDF file
  coverImage   String?   // Cover image URL
  fileSize     Int?      // File size in bytes
  pageCount    Int?      // Number of pages
  language     String    @default("id") // id, ar, en
  publisher    String?
  publishYear  String?
  isbn         String?
  tags         String    @default("[]") // JSON string of tags
  downloadCount Int      @default(0)
  viewCount    Int       @default(0)
  isFeatured   Boolean   @default(false)
  isPublic     Boolean   @default(true)
  createdBy    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("ebooks")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("settings")
}

model Student {
  id              String    @id @default(cuid())
  nisn            String?   @unique // Nomor Induk Siswa Nasional
  nis             String    @unique // Nomor Induk Siswa
  fullName        String
  nickname        String?
  birthPlace      String
  birthDate       DateTime
  gender          String    // MALE or FEMALE
  bloodType       String?   // A, B, AB, O
  religion        String    @default("Islam")
  nationality     String    @default("Indonesia")
  
  // Contact Information
  address         String
  village         String?   // Desa/Kelurahan
  district        String?   // Kecamatan
  city            String    // Kota/Kabupaten
  province        String    @default("Jawa Timur")
  postalCode      String?
  phone           String?
  email           String?
  
  // Parent Information
  fatherName      String
  fatherJob       String?
  fatherPhone     String?
  fatherEducation String?
  motherName      String
  motherJob       String?
  motherPhone     String?
  motherEducation String?
  guardianName    String?   // Wali if different from parents
  guardianJob     String?
  guardianPhone   String?
  guardianRelation String?  // Hubungan dengan wali
  
  // Academic Information
  institutionType String    // TK, SD, PONDOK
  grade           String?   // Kelas
  enrollmentDate  DateTime
  enrollmentYear  String    // Tahun ajaran
  previousSchool  String?
  
  // Additional Information
  specialNeeds    String?   // Kebutuhan khusus
  achievements    String    @default("[]") // JSON array of achievements
  notes           String?
  photo           String?   // URL to photo
  documents       String    @default("[]") // JSON array of document URLs
  
  // Status
  status          String    @default("ACTIVE") // ACTIVE, GRADUATED, TRANSFERRED, DROPPED
  isActive        Boolean   @default(true)
  graduationDate  DateTime?
  
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  creator         User      @relation(fields: [createdBy], references: [id])
  
  @@index([institutionType, status])
  @@index([enrollmentYear])
  @@map("students")
}

model Alumni {
  id              String    @id @default(cuid())
  nisn            String?   // Nomor Induk Siswa Nasional
  nis             String?   // Nomor Induk Siswa (lama)
  fullName        String
  nickname        String?
  birthPlace      String
  birthDate       DateTime
  gender          String    // MALE or FEMALE
  bloodType       String?
  religion        String    @default("Islam")
  nationality     String    @default("Indonesia")
  
  // Contact Information (Current)
  currentAddress  String
  currentCity     String
  currentProvince String?
  currentCountry  String    @default("Indonesia")
  phone           String?
  whatsapp        String?   // WhatsApp number for easy contact
  email           String?
  facebook        String?   // Facebook profile
  instagram       String?   // Instagram handle
  linkedin        String?   // LinkedIn profile
  
  // Parent Information
  fatherName      String?
  motherName      String?
  
  // Alumni Information
  institutionType String    // TK, SD, PONDOK
  graduationYear  String    // Tahun lulus
  generation      String?   // Angkatan
  
  // Current Status
  currentJob      String?   // Pekerjaan sekarang
  jobPosition     String?   // Jabatan
  company         String?   // Perusahaan/Institusi
  furtherEducation String?  // Pendidikan lanjutan
  university      String?   // Universitas
  major           String?   // Jurusan
  
  // Achievements After Graduation
  achievements    String    @default("[]") // JSON array of achievements
  
  // Family Information
  maritalStatus   String?   // SINGLE, MARRIED, DIVORCED
  spouseName      String?
  childrenCount   Int       @default(0)
  
  // Additional Information
  notes           String?
  photo           String?   // Recent photo URL
  memories        String?   // Kenangan di sekolah/pondok
  message         String?   // Pesan untuk juniors
  
  // Availability for Events
  availableForEvents Boolean @default(true) // Bisa diundang acara
  lastContactDate DateTime?
  
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  creator         User      @relation(fields: [createdBy], references: [id])
  
  @@index([institutionType, graduationYear])
  @@index([generation])
  @@index([availableForEvents])
  @@map("alumni")
}